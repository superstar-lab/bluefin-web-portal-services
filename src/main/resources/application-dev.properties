# ===============================
# = APPLICATION PROPERTIES
# ===============================

bluefin.wp.services.token.header = X-Auth-Token
bluefin.wp.services.token.secret = jDX7vCLwB6m8CMagE!DHwc9E3NeZSddyhZANK

bluefin.wp.services.resetpassword.email.link = https://ms-dev.internal.mcmcg.com/login/reset
bluefin.wp.services.registeruser.email.link = https://ms-dev.internal.mcmcg.com/login/reset

# ===============================
# = LOGS
# ===============================

log.file.path = /opt/tomcat/logs/
log.file.name = bluefin-web-portal-services
log.file.size = 100 MB
log.level = INFO

# ===============================
# = DATA SOURCE
# ===============================

spring.datasource.url = jdbc:mysql://mcm-aurora-dev-cluster.cluster-co0fpwqpitew.us-east-1.rds.amazonaws.com:3306/BlueFin
spring.datasource.driver-class-name = com.mysql.jdbc.Driver
spring.datasource.username = BlueFinDevUser
spring.datasource.password = MyBlueFin1234!

# ===============================
# = JPA / HIBERNATE
# ===============================

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# Show or not log for each sql query
spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update, validate)
spring.jpa.hibernate.ddl-auto = validate

# Naming strategy
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.EJB3NamingStrategy

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager)

# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect
